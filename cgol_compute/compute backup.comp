
#define SIGN(x) (x > 0 ? 1 : (x < 0 ? -1 : 0))
#define FRAC0(x) (x - floor(x))
#define FRAC1(x) (1 - x + floor(x))

#include "bgfx_compute.sh"

IMAGE2D_WR(out_tex, rgba32f, 1);
IMAGE2D_RO(in_tex, rgba32f, 0);




float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

bool check (ivec2 p)
{
    ivec2 size = imageSize(in_tex);
    int sum=0;
    for(int x = -1;x<=1;x++)
    {
        for(int y = -1;y<=1;y++)
        {
            if(x==0 && y==0)
            {

            }
            else
            {
                if(imageLoad(in_tex,p+ivec2(x,y)).r>0)
                sum ++; 
            }
        }
    }

if(imageLoad(in_tex,p).r<1 && sum==3)
    return true;

if(imageLoad(in_tex,p).r>0 && sum>3)
    return false;

if(imageLoad(in_tex,p).r>0 && sum<2)
    return false;

if(imageLoad(in_tex,p).r>0 && sum==3)
    return true;

if(imageLoad(in_tex,p).r>0)
    return true;
if(imageLoad(in_tex,p).r<0)
    return false;

}


NUM_THREADS(4, 4, 1)
void main()
{
ivec2 size = imageSize(in_tex);

ivec2 p = ivec2(gl_GlobalInvocationID.xy);
vec4 col;
/*ivec2 add = ivec2((p.x+1)%(size.x-2),(p.y+1)%(size.y-2)); 
col = imageLoad(in_tex,p);*/

if(check(p))
    imageStore(out_tex, p,vec4(1,1,1,1));
else
    imageStore(out_tex, p,vec4(0,0,0,1));
    
}
