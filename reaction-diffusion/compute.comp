
#include "bgfx_compute.sh"

IMAGE2D_WR(out_tex, rgba32f, 1);
SAMPLER2D(in_tex,0);
uniform vec4 dt;

float rand(vec2 co){
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}


vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}



vec4 laplacian(vec2 p)
{

//float o= 0;//(snoise(vec2(dt.y,1))-0.5);

float o = 0;//-(snoise(p)-0.5);

vec4 sum =  texelFetch(in_tex,p+vec2(-1+o,-1+o),0)*0.05+texelFetch(in_tex,p+vec2(0+o,-1+o),0)*0.2+texelFetch(in_tex,p+vec2(1+o,-1-o),0)*0.05+
            texelFetch(in_tex,p+vec2(-1+o, 0-o),0)*0.2 -1*texelFetch(in_tex,p+vec2(0+o,0+o),0)     +texelFetch(in_tex,p+vec2(1+o, 0+o),0)*0.2 +
            texelFetch(in_tex,p+vec2(-1+o, 1+o),0)*0.05+texelFetch(in_tex,p+vec2(0+o, 1+o),0)*0.2+texelFetch(in_tex,p+vec2(1-o, 1+o),0)*0.05;
return clamp(sum,-1,1);
}

vec4 diffusion_reaction(vec2 p, vec3 D,float f,float k,float dt)
{
    vec4 current = texelFetch(in_tex,p,0);
    float A = current.r;
    float B = current.g;
    float C = current.b;
    vec4 lp = laplacian(p);
    float Ap = A + (D.r*lp.r-A*B*B+f*(1-A))*dt;
    float Bp = B + (D.g*lp.g+A*B*B-(k+f)*B)*dt;
    float Cp = C + (D.b*lp.b+A*C*C-(k+f)*C)*dt;

    return vec4(clamp(Ap,0,0.99),clamp(Bp,0,0.99),clamp(Cp,0,0.1),1);
}




NUM_THREADS(4, 4, 1)
void main()
{

ivec2 p = ivec2(gl_GlobalInvocationID.xy);
vec4 col;
/*ivec2 add = ivec2((p.x+1)%(size.x-2),(p.y+1)%(size.y-2)); 
col = imageLoad(in_tex,p);*/

/*if(check(p))
    imageStore(out_tex, p,vec4(1,1,1,1));
else
    imageStore(out_tex, p,vec4(0,0,0,1));*/
float test = (sin(dt.y)+3)/140;
col = diffusion_reaction(p,vec3(0.4,0.15,1.1),test,0.065,2.7);
imageStore(out_tex, p,col);
}
